# Implementation of classic arcade game Pong

import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
LEFT = False
RIGHT = True
PA = 3
ball_pos = [WIDTH / 2, HEIGHT / 2]
ball_vel = [0,0]


# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_pos, ball_vel # these are vectors stored as lists
    ball_pos = [WIDTH / 2, HEIGHT / 2]
    x = random.randrange(120, 240)
    y = random.randrange(60, 180)
    print x, y
    ball_vel[1] = -y/100
    if direction == RIGHT:
        ball_vel[0] = x/100
    elif direction == LEFT:
        ball_vel[0] = -x/100
    
# define event handlers
def new_game():
    global paddle1_pos, paddle2_pos, paddle1_vel, paddle2_vel  # these are numbers
    global score1, score2  # these are ints
    paddle1_pos = HEIGHT / 2
    paddle2_pos = HEIGHT / 2
    paddle1_vel = 0
    paddle2_vel = 0
    score1 = 0
    score2 = 0
    spawn_ball(RIGHT)

def draw(canvas):
    global score1, score2, paddle1_pos, paddle2_pos, ball_pos, ball_vel, paddle1_vel, paddle2_vel
    
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
   
    if ball_pos[0] < PAD_WIDTH + BALL_RADIUS or ball_pos[0] > WIDTH - PAD_WIDTH - BALL_RADIUS:
        ball_vel[0] = -ball_vel[0]

        if ball_pos[0] < WIDTH / 2:
            if (ball_pos[1] >= paddle1_pos - HALF_PAD_HEIGHT) and (ball_pos[1] <= paddle1_pos + HALF_PAD_HEIGHT):
                ball_vel[0] = 1.1 * ball_vel[0]
            else:
                score2 += 1
                spawn_ball(RIGHT)
    
        if ball_pos[0] > WIDTH / 2:
            if ball_pos[1] >= paddle2_pos - HALF_PAD_HEIGHT and ball_pos[1] <= paddle2_pos + HALF_PAD_HEIGHT: 
                ball_vel[0] = 1.1 * ball_vel[0]
            else:
                score1 += 1
                spawn_ball(LEFT)
     
    if ball_pos[1] < BALL_RADIUS or ball_pos[1] > HEIGHT - BALL_RADIUS:
        ball_vel[1] = -ball_vel[1]
    
    # determine whether paddle and ball collide    
    if paddle1_pos >= HALF_PAD_HEIGHT and paddle1_pos <= HEIGHT - HALF_PAD_HEIGHT: 
        paddle1_pos += paddle1_vel
    if paddle2_pos >= HALF_PAD_HEIGHT and paddle1_pos <= HEIGHT - HALF_PAD_HEIGHT:
        paddle2_pos += paddle2_vel
    
   

    # draw scores
    canvas.draw_text(str(score1), (WIDTH /4, HEIGHT /2), 20, 'Red')
    canvas.draw_text(str(score2), (3 * WIDTH /4, HEIGHT /2), 20, 'Red')
    
    

    
    # update paddle's vertical position, keep paddle on the screen
    
    if paddle1_pos == HALF_PAD_HEIGHT or paddle1_pos == HEIGHT - HALF_PAD_HEIGHT:
        paddle1_vel = 0
    elif paddle2_pos == HALF_PAD_HEIGHT or paddle2_pos == HEIGHT - HALF_PAD_HEIGHT:
        paddle2_vel = 0
    
    # check the paddles' vertical positions on the screen
    if paddle1_pos <= HALF_PAD_HEIGHT: 
        paddle1_pos = HALF_PAD_HEIGHT
    elif paddle1_pos >= HEIGHT - HALF_PAD_HEIGHT:
        paddle1_pos = HEIGHT - HALF_PAD_HEIGHT
    elif paddle2_pos <= HALF_PAD_HEIGHT: 
        paddle2_pos = HALF_PAD_HEIGHT
    elif paddle2_pos >= HEIGHT - HALF_PAD_HEIGHT:
        paddle2_pos = HEIGHT - HALF_PAD_HEIGHT    
    
    # draw ball
    canvas.draw_circle([ball_pos[0], ball_pos[1]], BALL_RADIUS, 6, 'White', 'White')
    
    # draw paddles
    canvas.draw_polygon([(0, paddle1_pos-HALF_PAD_HEIGHT), (PAD_WIDTH, paddle1_pos-HALF_PAD_HEIGHT), (PAD_WIDTH, paddle1_pos+HALF_PAD_HEIGHT), (0, paddle1_pos+HALF_PAD_HEIGHT)], 1, 'White', 'White')
    canvas.draw_polygon([(WIDTH-PAD_WIDTH, paddle2_pos-HALF_PAD_HEIGHT), (WIDTH, paddle2_pos-HALF_PAD_HEIGHT), (WIDTH, paddle2_pos+HALF_PAD_HEIGHT), (WIDTH-PAD_WIDTH, paddle2_pos+HALF_PAD_HEIGHT)], 1, 'White', 'White')
    

        
def keydown(key):
    global paddle1_vel, paddle2_vel, PA
    if key == simplegui.KEY_MAP['w']:
        paddle1_vel -= PA
    elif key == simplegui.KEY_MAP['s']:
        paddle1_vel += PA
    if key == simplegui.KEY_MAP['up']:
        paddle2_vel -= PA 
    elif key == simplegui.KEY_MAP['down']:
        paddle2_vel += PA
   
def keyup(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP['w']:
        paddle1_vel = 0
    elif key == simplegui.KEY_MAP['s']:
        paddle1_vel = 0
    if key == simplegui.KEY_MAP['up']:
        paddle2_vel = 0 
    elif key == simplegui.KEY_MAP['down']:
        paddle2_vel = 0 


# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
button1 = frame.add_button('Restart', new_game)


# start frame
new_game()
frame.start()
